@Java
//(c) A+ Computer Science  
@@
//(c) A+ Computer Science

method main()
{
   Jeroo bob = new Jeroo(500);
   bob.turn(RIGHT);
   bob.plant();
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(LEFT);
   bob.hop(3);
   bob.plant();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.hop();
   bob.turn(LEFT);
   bob.turn(LEFT);
   bob.hop(2);
   bob.turn(RIGHT);
   bob.plant();
   bob.hop();
   bob.plant();
   bob.hop();
   bob.turn(RIGHT);
   bob.plant();
   bob.hop();
   bob.plant();
   bob.hop();
   bob.turn(LEFT);
   bob.plant();
   bob.hop();
   bob.plant();
   bob.hop();
   bob.turn(LEFT);
   bob.plant();
   bob.hop();
   bob.plant();
   bob.hop();
   bob.turn(LEFT);
   bob.turn(LEFT);
   bob.hop(5);
   bob.plant();
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(RIGHT);
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(RIGHT);
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(LEFT);
   bob.turn(LEFT);
   bob.hop(2);
   bob.turn(RIGHT);
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(RIGHT);
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(RIGHT);
   bob.turn(RIGHT);
   bob.hop(7);
   bob.plant();
   bob.turn(LEFT);
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(LEFT);
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(RIGHT);
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(RIGHT);
   bob.turn(RIGHT);
   bob.hop(2);
   bob.turn(LEFT);
   bob.hop(2);
   bob.turn(LEFT);
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(RIGHT);
   bob.hop(3);
   bob.plant();
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(LEFT);
   bob.turn(LEFT);
   bob.hop(2);
   bob.turn(LEFT);
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(LEFT);
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(RIGHT);
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(RIGHT);
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.hop(18);
   bob.turn(LEFT);
   bob.hop(3);
   bob.plant();
   bob.turn(LEFT);
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(LEFT);
   bob.turn(LEFT);
   bob.hop(2);
   bob.turn(LEFT);
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(LEFT);
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(LEFT);
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(LEFT);
   bob.hop();
   bob.plant();
   bob.turn(LEFT);
   bob.hop(2);
   bob.turn(LEFT);
   bob.hop(4);
   bob.plant();
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(RIGHT);
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(LEFT);
   bob.hop(3);
   bob.plant();
   bob.turn(RIGHT);
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(LEFT);
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(LEFT);
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.hop();
   bob.plant();
   bob.turn(LEFT);
   bob.hop();
   bob.plant();
   bob.turn(LEFT);
   bob.hop(2);
   bob.plant();
   bob.turn(LEFT);
   bob.hop(10);
   
} 
